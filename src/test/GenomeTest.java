import agh.cs.project1.Genome;
import org.junit.Test;

import java.util.Random;

import static org.junit.Assert.*;

public class GenomeTest
{
    private static final Random random = new Random();

    @Test
    public void toStringTest()
    {
        for (String expected : GENOME_STRINGS)
        {
            assertEquals(expected, Genome.fromString(expected).toString());
        }
    }

    @Test
    public void sortedArrayRepresentation()
    {
        for (String expected : GENOME_STRINGS)
        {
            assertEquals(expected, Genome.fromSortedArray(Genome.fromString(expected).asSortedArray()).toString());
        }
    }

    @Test
    public void combine()
    {
        for (String firstString : SAME_SIZE_GENOME_STRINGS)
        {
            for (String secondString : SAME_SIZE_GENOME_STRINGS)
            {
                if (firstString.equals(secondString))
                {
                    continue;
                }

                Genome singleGenome = Genome.fromString(firstString);
                Genome doubleGenome = Genome.fromString(secondString);

                int firstSlice = 1 + random.nextInt(firstString.length() - 2);
                int secondSlice = firstSlice + 1 + random.nextInt(secondString.length() - firstSlice - 1);

                // Combining the appropriate genes from the string representation.
                String clearedFirstString = secondString.substring(0, firstSlice) + firstString.substring(firstSlice, secondSlice) + secondString.substring(secondSlice);

                Genome combinedGenome = Genome.combine(singleGenome, doubleGenome, firstSlice, secondSlice);

                String seperatedSingleString = firstString.substring(0, firstSlice) + "|" + firstString.substring(firstSlice, secondSlice) + "|" + firstString.substring(secondSlice);
                String seperatedDoubleString = secondString.substring(0, firstSlice) + "|" + secondString.substring(firstSlice, secondSlice) + "|" + secondString.substring(secondSlice);

                assertEquals(String.format("%s, %s", seperatedSingleString, seperatedDoubleString), Genome.fromString(clearedFirstString), combinedGenome);

                // After combining, the genome should be complete.
                assertTrue(combinedGenome.isFairlyDistributed());
            }
        }
    }

    private static final String[] SAME_SIZE_GENOME_STRINGS = new String[] {
            "00000011112333444445555556666677",
            "00000111111222222334444445566777",
            "00000011222233334444455556666777",
            "00000001122222334444455555667777",
            "00011111222333444455556666677777",
            "00001112222222222333444445666677",
            "00011112222233333444445556667777",
            "00000011112222233334444556666777",
            "00011112233344444555666666777777",
            "00001112222223333344555566666777",
            "00011112223333344455556666777777",
            "00011111222233334445555566777777",
            "00001122222333334444555556666677",
            "00001111222333444455555566667777",
            "00111222233334444455555555666677",
            "00000001222333344455555556677777",
            "01112222333344444455556666667777",
            "00011111223333344444555555666777",
            "00011112222233334444455566667777",
            "00001111122223334444555556666677",
            "00011111223333444555556666667777",
            "00001111122333334444455555667777",
            "00001112222233333344455555556667",
            "00011111122223334455555556667777",
            "00011111222222234444444556667777",
            "00001111222233334444455666677777",
            "00001123333344444555566666677777",
            "00011112222222333333444555556777",
            "00000011122333344555666666677777",
            "00011122223333444555556666667777",
            "00000011222223333333444455566677",
            "00011111122233333444445555566667",
            "00011111122233334445555666666667",
            "00011222223333444455556666667777",
            "00001111223333333444556667777777",
            "00001111112223344444456667777777",
            "00000112223333444555566667777777",
            "00011222222223334445556666677777",
            "01122222222233344444455666777777",
            "00000122223334455556666777777777",
            "00000111122333444445555556666777",
            "00112222222333444445556666667777",
            "00011112333344445566666677777777",
            "00011111111223344555666666677777",
            "00011222233334444455556666677777",
            "00011122233333344444445555666777",
            "00001111223334445566666666677777",
            "00111222223333344455555566666777",
            "00011112222233333445555555666677",
            "00000012222333333445555566667777",
    };

    private static final String[] GENOME_STRINGS = new String[] {
            "001122233344555566666677",
            "0111111222222344445555555667",
            "0000111122333333444555666677",
            "00011112233334444555666777",
            "00001112222334444555555567",
            "00000123445555677",
            "0011122223344556677",
            "0112223333334445566666666777",
            "011111223445666666777",
            "0001122223344555667",
            "00011112233333344444445556667",
            "0001122223344556677",
            "00111122222222233444445667777",
            "000112223333455667777",
            "00011122333444455556666677777",
            "011122233455566667777",
            "00011122222334445566667",
            "00001112234555567",
            "00112223333344455566666777777",
            "0123334455566777",
            "0000011122223344556666667777",
            "00011233455555677",
            "00001111112233333445566777",
            "00001122233344455556666777",
            "0000123344445666777",
            "00000111112222233333445556677",
            "000111122344455566677777",
            "0011112222333445667777777",
            "0001111222333444555566667777",
            "011112223334566777",
            "0001112233334444555555667777",
            "0000112344456666777",
            "000111122233445555556677",
            "0001112223334444444555677",
            "0011222223444555566677",
            "000111222223445555666777",
            "001222233345566677",
            "0001112222333344555556677",
            "001111233334445555667",
            "0000112222222233455666777",
            "00111112333444444555555667777",
            "00001112222334455555566677777",
            "0000001122223334445556666777",
            "00001111222344455566666777",
            "0111233344556677",
            "011111122333455677",
            "00001233344566677",
            "0112233344444455566777777",
            "001123344556677",
            "0011222333444455566666667",
            "0011223344556666777777",
            "001112233344455555666777",
            "00122223334455666777",
            "00111112222223444556666677",
            "0112233455556667",
            "00011234444567777",
            "00011122333344445566666777777",
            "000001233334445555666777777",
            "00011222334455566777",
            "0011222334445556777",
            "000111233345666677",
            "00000122333445677",
            "000112233444555556677",
            "00011222334555567",
            "011122233445555556667777",
            "000111222344456666667777",
            "0000011123333444445556667777",
            "00112233333444455566677",
            "0122234445566667",
            "000111111233345555667777",
            "011112333455555677",
            "000111222223334444555677777",
            "001111233445667",
            "0001111122223333445566666777",
            "0011222233333444444555567777",
            "00011112223444556666677",
            "0000122234445567",
            "0000111112223333344455666777",
            "001123445566667",
            "0000111122234555666777777",
            "00011222233455556666777",
            "0122223444555667",
            "01112222233344444455556667777",
            "0001112222333344555666667777",
            "012333345566666777",
            "0012222333444455666777",
            "0011111223334444566667777",
            "0011111222333444455667777",
            "00011112234556667",
            "0112233445556777",
            "00001111222333444455556666777",
            "00001122334455555566777",
            "0001111122222333444555555677",
            "00000111112223344566777777",
            "01111122233344444555667777",
            "01112222233444445555556666777",
            "011222344555677",
            "0011112344556677",
            "000122345556667",
            "00012223345556677",
            "00000111222233345566666677777",
            "0000112222333334445566666777",
            "011123344556677",
            "012233333445666777",
            "000122344455555666777",
            "0011112333344445666667777",
            "000111222222334455566666677",
            "00011122233444456667",
            "000011122333334455556777",
            "0001111222334444556667",
            "000001122233333444556667777",
            "0001123444456667",
            "01112223333444566777",
            "000111122222233445567777",
            "00000111222333444455666777",
            "0011112223455556677",
            "00011111222344555666777777",
            "00001123444555666777",
            "00111111222333344444455566777",
            "001112223344445566677777",
            "0001111122344455555566667777",
            "000111234445667",
            "0001111222233344455566666677",
            "0011122333333455566777",
            "00122233345566777",
            "00011122233444455556677",
            "00011122333334455555566777",
            "00111222223334455555666667777",
            "00112233344455566777",
            "001122233455677",
            "0111122333444455667",
            "000112223444445677777",
            "012233445555666777777",
            "000122233334455666777",
            "0000111111223334455666677777",
            "001111123333334445666666777",
            "0111222333344555566677777",
            "0000011122334556677",
            "001112234445555666667777",
            "00001112223333344555677",
            "00111111223333334445566667777",
            "0001111222333334455666677",
            "000001111222234455556666777",
            "00011122344456667777",
            "0000011222344556677",
            "01112223344444555555677",
            "000111122333344445555566777",
            "0000112344556666777",
            "00112233344455667777",
            "0122344445555567",
            "00111223333444444555566667777",
            "0001222222333344566777",
            "000111222334455556666667",
            "01122333334555666777777",
            "00111122233344455556667777",
            "0123334445666677",
            "001112223344444555666677",
            "000111222333344444566667777",
            "012233445566667",
            "0011112333334444555667777",
            "0001123333455566677",
            "011111223334444455566666677",
            "000001112223444445555566777",
            "000122223445556677",
            "0011111222344444556677",
            "0112334444556677",
            "0000122334455666777",
            "0000112233344555667777",
            "0011112223333445667",
            "0122333445566777",
            "00000122223345566677",
            "000011123345555667",
            "011233455667777",
            "011122233333444566667777",
            "000111223334445556777",
            "0000112222333334555666677",
            "00001222345555566677",
            "001223444556777",
            "0122333445566667",
            "00011112233445566677",
            "0000111122233333444555667777",
            "00011222334445555666667777",
            "00111122234455556666777",
            "001223344555567",
            "0001112233334445566666777",
            "0000011111222233345566677777",
            "00011222233444555666677777",
            "00111123344455556667",
            "000001123334444555556666777",
            "0000122223334444556666677",
            "00011112222344555555666677",
            "00001222334444555555667777",
            "001122223334556677",
            "00000112223334444555667777",
            "0001122234444455566777",
            "0001122234455555556677",
            "000000111233344555567",
            "000011233456677",
            "0011233344555666777",
            "0011111112222233344445666677",
    };
}
